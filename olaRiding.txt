public class RideRequest extends Thread
{
	@Override
	public void run() 
	{
		System.out.println("User Requested a Ride..");
		try 
		{
			Thread.sleep(2000);
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		System.out.println("Searching for nearby drivers...");
	}
}

public class FareCalculation extends Thread
{
	@Override
	public void run() 
	{
		System.out.println("Calculating estimated fare...");
		try
		{
			Thread.sleep(1500);
		}
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}
		System.out.println("Estimated fare: Rs.135.75");
	}
}

public class DriverAssignment extends Thread
{
	@Override
	public void run() 
	{
		try 
		{
			Thread.sleep(1000);
		} 
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}
		System.out.println("Driver found and assigned!");
	}
}


public class LiveTracking extends Thread
{
	@Override
	public void run() 
	{
		
  for(int i=20;i<=100;i++)
		{
			if(i%20==0)
			{
				System.out.println("Updating ride location.."+i+"% completed");
			}
			try 
			{
				Thread.sleep(100);
			} 
			catch (InterruptedException e) 
			{
				e.printStackTrace();
			}
		}
		System.out.println("Ride Completed...");
	}
}

public class PaymentProcessing extends Thread 
{
	@Override
	public void run()
	{
		System.out.println("Processing payment...");
		try 
		{
			Thread.sleep(2000);
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		System.out.println("Payment successful!");
	}
}


public class RatingSystem extends Thread 
{
	@Override
	public void run()
	{
		System.out.println("Requesting user rating...");
		try 
		{
			Thread.sleep(1000);
		} catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		System.out.println("Hooray! User rated the ride: 5 star");
	}
}

public class OlaRidingApp 
{
	public static void main(String[] args) 
	{
		RideRequest rr=new RideRequest();
		DriverAssignment da=new DriverAssignment();
		FareCalculation fc=new FareCalculation();
		LiveTracking lt=new LiveTracking();
		PaymentProcessing pp=new PaymentProcessing();
		RatingSystem rs=new RatingSystem();
		
		rr.start(); fc.start();
		try
		{
			fc.join();
		}
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}
		try 
		{
			rr.join();
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		da.start();
		try
		{
			da.join();
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		lt.start();
		
		try
		{
			lt.join();
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		pp.start();
		try
		{
			pp.join();
		} 
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}
		rs.start();
		

	}

}

